on: [release, push]

env:
    REGISTRY_NAME: gpmtregistry
    CLUSTER_NAME: GPMTCluster
    NAMESPACE: rasa
    REGISTRY_SECRET_NAME: registry-token
    VERSION: v1
    CLUSTER_RESOURCE_GROUP: GPMTGroup

name: Deployment to AKS

jobs:
    build:
        runs-on: ubuntu-latest
        name: Build action container
        steps:
        - uses: actions/checkout@v2
        - name: ACR login
          uses: azure/docker-login@v1
          with:
            login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.ACR_ID }}
            password: ${{ secrets.ACR_CREDENTIALS }}
            
        - name: rasa action container build
          run: docker build ./actions -t ${{ env.REGISTRY_NAME }}.azurecr.io/gpmt-rasa-actions:${{ env.VERSION }}
        
        - name: rasa action container push
          run: docker push ${{ env.REGISTRY_NAME }}.azurecr.io/gpmt-rasa-actions:${{ env.VERSION }}
    
    train-test:
        name: Train and test rasa bot
        needs: build
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2
        - name: Rasa train and test
          uses: RasaHQ/rasa-train-test-gha@main
          with:
            rasa_version: "2.3.0-full"
            data_validate: true
            rasa_train: true
            cross_validation: true
            rasa_test: true
            publish_summary: true
            github_token: ${{ secrets.GITHUB_TOKEN }}
        - name: Upload model
          if: github.ref == 'refs/heads/main'
          uses: actions/upload-artifact@master
          with:
            name: model
            path: models
        #- name: Upload model to Rasa X
        #  run: curl -k -F "model=@my_model.tar.gz" "https://rasa-gpmt.northeurope.cloudapp.azure.com/api/projects/default/models?api_token=4f5e1d0b08cf891ddd8d0be548cd6543bad572c3"

    deploy:
        name: Deploy to AKS
        runs-on: ubuntu-latest
        needs: build
        steps:
        - uses: actions/checkout@v2
        
        - name: Set AKS cluster context
          uses: azure/aks-set-context@v1
          with: 
            creds: '${{ secrets.AZURE_CREDENTIALS }}'
            cluster-name: ${{ env.CLUSTER_NAME }}
            resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
        
        - name: Create Kubernetes namespace ${{ env.NAMESPACE }}
          run: kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -
        
        - name: Create Kubernetes registry secret
          uses: azure/k8s-create-secret@v1
          with:
            container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
            container-registry-username: ${{ secrets.ACR_ID }}
            container-registry-password: ${{ secrets.ACR_CREDENTIALS }}
            secret-name: ${{ env.REGISTRY_SECRET_NAME }}
            namespace: ${{ env.NAMESPACE }}
        
        - uses: azure/setup-helm@v1
          with:
            version: '3.5.3'
          id: install    
        
        - name: Fetch helm repos             
          run: |
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            helm repo add rasa-x https://rasahq.github.io/rasa-x-helm
            helm repo update

        - name: Deploy nginx chart
          run: |
            helm template nginx ingress-nginx/ingress-nginx \
            --values ./manifest/nginx.values.yaml -n ${{ env.NAMESPACE }} | kubectl apply -f -

        - name: Deploy Letsencrypt CA issuer
          run: kubectl apply -f manifest/issuer.yaml -n ${{ env.NAMESPACE }} 

        - name: Deploy Rasa X
          run: |
            helm template rasa-x rasa-x/rasa-x \
            --namespace ${{ env.NAMESPACE }} \
            --values ./manifest/rasa.values.yaml | kubectl apply -f -
#            --values ./manifest/prod/rasa.values.yaml \
#            --set rasax.initialUser.password=${{ secrets.RASA_X_PASSWORD }} \
#            --set rabbitmq.rabbitmq.password=${{ secrets.RABBITMQ_PASSWORD }} \
#            --set global.postgresql.postgresqlPassword=${{ secrets.TRACKER_DB_PASSWORD }} \
#            --set global.redis.password=${{ secrets.REDIS_PASSWORD }} \
#            --set images.imagePullSecrets[0].name=${{ env.REGISTRY_SECRET_NAME }} \
#            --wait

